{"version":3,"file":"angular-notifier.umd.js","sources":["src/models/notifier-notification.model.ts","src/services/notifier-queue.service.ts","src/models/notifier-config.model.ts","src/services/notifier.service.ts","src/components/notifier-container.component.ts","src/animation-presets/fade.animation-preset.ts","src/animation-presets/slide.animation-preset.ts","src/services/notifier-animation.service.ts","src/services/notifier-timer.service.ts","src/components/notifier-notification.component.ts","src/notifier.module.ts"],"sourcesContent":["import { NotifierNotificationComponent } from './../components/notifier-notification.component';\nimport { TemplateRef } from '@angular/core';\n\n/**\n * Notification\n *\n * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.\n */\nexport class NotifierNotification {\n\t/**\n\t * Unique notification ID, can be set manually to control the notification from outside later on\n\t */\n    public id: string;\n\n\t/**\n\t * Notification type, will be used for constructing an appropriate class name\n\t */\n    public type: string;\n\n\t/**\n\t * Notification message\n\t */\n    public message: string;\n\n\t/**\n\t * Notification data\n\t */\n    public data: any;\n\n\t/**\n\t * The template to customize\n\t * the appearance of the notification\n\t */\n    public template?: TemplateRef<any> = null;\n\n\t/**\n\t * Component reference of this notification, created and set during creation time\n\t */\n    public component: NotifierNotificationComponent;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param options Notifier options\n\t */\n    public constructor(options: NotifierNotificationOptions) {\n        Object.assign(this, options);\n\n        // If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser\n        // datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,\n        // is not possible due to the action queue concept.\n        if (options.id === undefined) {\n            this.id = `ID_${new Date().getTime()}`;\n        }\n    }\n}\n\n/**\n * Notifiction options\n *\n * This interface describes which information are needed to create a new notification, or in other words, which information the external API\n * call must provide.\n */\nexport interface NotifierNotificationOptions {\n\t/**\n\t * Notification ID, optional\n\t */\n    id?: string;\n\n\t/**\n\t * Notification type\n\t */\n    type: string;\n\n\t/**\n\t * Notificatin message\n\t */\n    message: string;\n\n\t/**\n\t * Notification data\n\t */\n    data?: any;\n\n\t/**\n\t * The template to customize\n\t * the appearance of the notification\n\t */\n    template?: TemplateRef<any>;\n}\n","import { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\nimport { NotifierAction } from './../models/notifier-action.model';\n\n/**\n * Notifier queue service\n *\n * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls\n * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -\n * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and\n * processes them at the right time (which is when the previous action has been processed successfully).\n *\n * Technical sidenote:\n * An action looks pretty similar to the ones within the Flux / Redux pattern.\n */\n@Injectable()\nexport class NotifierQueueService {\n\n\t/**\n\t * Stream of actions, subscribable from outside\n\t */\n    public readonly actionStream: Subject<NotifierAction>;\n\n\t/**\n\t * Queue of actions\n\t */\n    private actionQueue: Array<NotifierAction>;\n\n\t/**\n\t * Flag, true if some action is currently in progress\n\t */\n    private isActionInProgress: boolean;\n\n\t/**\n\t * Constructor\n\t */\n    public constructor() {\n        this.actionStream = new Subject<NotifierAction>();\n        this.actionQueue = [];\n        this.isActionInProgress = false;\n    }\n\n\t/**\n\t * Push a new action to the queue, and try to run it\n\t *\n\t * @param action Action object\n\t */\n    public push(action: NotifierAction): void {\n        this.actionQueue.push(action);\n        this.tryToRunNextAction();\n    }\n\n\t/**\n\t * Continue with the next action (called when the current action is finished)\n\t */\n    public continue(): void {\n        this.isActionInProgress = false;\n        this.tryToRunNextAction();\n    }\n\n\t/**\n\t * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left\n\t */\n    private tryToRunNextAction(): void {\n        if (this.isActionInProgress || this.actionQueue.length === 0) {\n            return; // Skip (the queue can now go drink a coffee as it has nothing to do anymore)\n        }\n        this.isActionInProgress = true;\n        this.actionStream.next(this.actionQueue.shift()); // Push next action to the stream, and remove the current action from the queue\n    }\n\n}\n","export interface NotifierOptions {\n    animations?: {\n        enabled?: boolean;\n        hide?: {\n            easing?: string;\n            offset?: number | false;\n            preset?: string;\n            speed?: number;\n        };\n        overlap?: number | false;\n        shift?: {\n            easing?: string;\n            speed?: number;\n        };\n        show?: {\n            easing?: string;\n            preset?: string;\n            speed?: number;\n        };\n    };\n    behaviour?: {\n        autoHide?: number | false;\n        onClick?: 'hide' | false;\n        onMouseover?: 'pauseAutoHide' | 'resetAutoHide' | false;\n        showDismissButton?: boolean;\n        stacking?: number | false;\n    };\n    position?: {\n        horizontal?: {\n            distance?: number;\n            position?: 'left' | 'middle' | 'right';\n        };\n        vertical?: {\n            distance?: number;\n            gap?: number;\n            position?: 'top' | 'bottom';\n        };\n    };\n    theme?: string;\n}\n\n/**\n * Notifier configuration\n *\n * The notifier configuration defines what notifications look like, how they behave, and how they get animated. It is a global\n * configuration, which means that it only can be set once (at the beginning), and cannot be changed afterwards. Aligning to the world of\n * Angular, this configuration can be provided in the root app module - alternatively, a meaningful default configuration will be used.\n */\nexport class NotifierConfig implements NotifierOptions {\n\n\t/**\n\t * Customize animations\n\t */\n    public animations: {\n        enabled: boolean;\n        hide: {\n            easing: string;\n            offset: number | false;\n            preset: string;\n            speed: number;\n        };\n        overlap: number | false;\n        shift: {\n            easing: string;\n            speed: number;\n        };\n        show: {\n            easing: string;\n            preset: string;\n            speed: number;\n        };\n    };\n\n\t/**\n\t * Customize behaviour\n\t */\n    public behaviour: {\n        autoHide: number | false;\n        onClick: 'hide' | false;\n        onMouseover: 'pauseAutoHide' | 'resetAutoHide' | false;\n        showDismissButton: boolean;\n        stacking: number | false;\n    };\n\n\t/**\n\t * Customize positioning\n\t */\n    public position: {\n        horizontal: {\n            distance: number;\n            position: 'left' | 'middle' | 'right';\n        };\n        vertical: {\n            distance: number;\n            gap: number;\n            position: 'top' | 'bottom';\n        };\n    };\n\n\t/**\n\t * Customize theming\n\t */\n    public theme: string;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param [customOptions={}] Custom notifier options, optional\n\t */\n    public constructor(customOptions: NotifierOptions = {}) {\n\n        // Set default values\n        this.animations = {\n            enabled: true,\n            hide: {\n                easing: 'ease',\n                offset: 50,\n                preset: 'fade',\n                speed: 300\n            },\n            overlap: 150,\n            shift: {\n                easing: 'ease',\n                speed: 300\n            },\n            show: {\n                easing: 'ease',\n                preset: 'slide',\n                speed: 300\n            }\n        };\n        this.behaviour = {\n            autoHide: 7000,\n            onClick: false,\n            onMouseover: 'pauseAutoHide',\n            showDismissButton: true,\n            stacking: 4\n        };\n        this.position = {\n            horizontal: {\n                distance: 12,\n                position: 'left'\n            },\n            vertical: {\n                distance: 12,\n                gap: 10,\n                position: 'bottom'\n            }\n        };\n        this.theme = 'material';\n\n        // The following merges the custom options into the notifier config, respecting the already set default values\n        // This linear, more explicit and code-sizy workflow is preferred here over a recursive one (because we know the object structure)\n        // Technical sidenote: Objects are merged, other types of values simply overwritten / copied\n        if (customOptions.theme !== undefined) {\n            this.theme = customOptions.theme;\n        }\n        if (customOptions.animations !== undefined) {\n            if (customOptions.animations.enabled !== undefined) {\n                this.animations.enabled = customOptions.animations.enabled;\n            }\n            if (customOptions.animations.overlap !== undefined) {\n                this.animations.overlap = customOptions.animations.overlap;\n            }\n            if (customOptions.animations.hide !== undefined) {\n                Object.assign(this.animations.hide, customOptions.animations.hide);\n            }\n            if (customOptions.animations.shift !== undefined) {\n                Object.assign(this.animations.shift, customOptions.animations.shift);\n            }\n            if (customOptions.animations.show !== undefined) {\n                Object.assign(this.animations.show, customOptions.animations.show);\n            }\n        }\n        if (customOptions.behaviour !== undefined) {\n            Object.assign(this.behaviour, customOptions.behaviour);\n        }\n        if (customOptions.position !== undefined) {\n            if (customOptions.position.horizontal !== undefined) {\n                Object.assign(this.position.horizontal, customOptions.position.horizontal);\n            }\n            if (customOptions.position.vertical !== undefined) {\n                Object.assign(this.position.vertical, customOptions.position.vertical);\n            }\n        }\n\n    }\n\n}\n","import { Inject, Injectable, forwardRef } from '@angular/core';\n\nimport { NotifierConfig } from './../models/notifier-config.model';\nimport { NotifierNotificationOptions } from './../models/notifier-notification.model';\nimport { NotifierQueueService } from './notifier-queue.service';\nimport { NotifierConfigToken } from './../notifier.module';\n\n/**\n * Notifier service\n *\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\n */\n@Injectable()\nexport class NotifierService {\n\n\t/**\n\t * Notifier queue service\n\t */\n    private readonly queueService: NotifierQueueService;\n\n\t/**\n\t * Notifier configuration\n\t */\n    private readonly config: NotifierConfig;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param notifierQueueService Notifier queue service\n\t * @param config               Notifier configuration, optionally injected as a dependency\n\t */\n    public constructor(\n        notifierQueueService: NotifierQueueService,\n        @Inject(forwardRef(() => NotifierConfigToken)) config: NotifierConfig // The forwardRef is (sadly) required here\n    ) {\n        this.queueService = notifierQueueService;\n        this.config = config;\n    }\n\n\t/**\n\t * Get the notifier configuration\n\t *\n\t * @returns Notifier configuration\n\t */\n    public getConfig(): NotifierConfig {\n        return this.config;\n    }\n\n\t/**\n\t * API: Show a new notification\n\t *\n\t * @param notificationOptions Notification options\n\t */\n    public show(notificationOptions: NotifierNotificationOptions): void {\n        this.queueService.push({\n            payload: notificationOptions,\n            type: 'SHOW'\n        });\n    }\n\n\t/**\n\t * API: Hide a specific notification, given its ID\n\t *\n\t * @param notificationId ID of the notification to hide\n\t */\n    public hide(notificationId: string): void {\n        this.queueService.push({\n            payload: notificationId,\n            type: 'HIDE'\n        });\n    }\n\n\t/**\n\t * API: Hide the newest notification\n\t */\n    public hideNewest(): void {\n        this.queueService.push({\n            type: 'HIDE_NEWEST'\n        });\n    }\n\n\t/**\n\t * API: Hide the oldest notification\n\t */\n    public hideOldest(): void {\n        this.queueService.push({\n            type: 'HIDE_OLDEST'\n        });\n    }\n\n\t/**\n\t * API: Hide all notifications at once\n\t */\n    public hideAll(): void {\n        this.queueService.push({\n            type: 'HIDE_ALL'\n        });\n    }\n\n\t/**\n\t * API: Shortcut for showing a new notification\n\t *\n\t * @param type             Type of the notification\n\t * @param message          Message of the notification\n\t * @param [notificationId] Unique ID for the notification (optional)\n\t */\n    public notify(type: string, message: string, notificationId?: string): void {\n        let notificationOptions: NotifierNotificationOptions = {\n            message,\n            type\n        };\n        if (notificationId !== undefined) {\n            notificationOptions.id = notificationId;\n        }\n        this.show(notificationOptions);\n    }\n\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy, OnInit } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { NotifierAction } from './../models/notifier-action.model';\nimport { NotifierConfig } from './../models/notifier-config.model';\nimport { NotifierNotification } from './../models/notifier-notification.model';\nimport { NotifierQueueService } from './../services/notifier-queue.service';\nimport { NotifierService } from './../services/notifier.service';\nimport { NotifierNotificationComponent } from './notifier-notification.component';\n\n/**\n * Notifier container component\n * ----------------------------\n * This component acts as a wrapper for all notification components; consequently, it is responsible for creating a new notification\n * component and removing an existing notification component. Being more precicely, it also handles side effects of those actions, such as\n * shifting or even completely removing other notifications as well. Overall, this components handles actions coming from the queue service\n * by subscribing to its action stream.\n *\n * Technical sidenote:\n * This component has to be used somewhere in an application to work; it will not inject and create itself automatically, primarily in order\n * to not break the Angular AoT compilation. Moreover, this component (and also the notification components) set their change detection\n * strategy onPush, which means that we handle change detection manually in order to get the best performance. (#perfmatters)\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush, // (#perfmatters)\n    host: {\n        class: 'notifier__container'\n    },\n    selector: 'notifier-container',\n    template: '<ul><li *ngFor=\"let notification of notifications; trackBy: identifyNotification;\" class=\"notifier__container-list\"><notifier-notification (dismiss)=\"onNotificationDismiss( $event )\" (ready)=\"onNotificationReady( $event )\" [notification]=\"notification\"></notifier-notification></ul>'\n})\nexport class NotifierContainerComponent implements OnDestroy, OnInit {\n\n\t/**\n\t * List of currently somewhat active notifications\n\t */\n    public notifications: Array<NotifierNotification>;\n\n\t/**\n\t * Change detector\n\t */\n    private readonly changeDetector: ChangeDetectorRef;\n\n\t/**\n\t * Notifier queue service\n\t */\n    private readonly queueService: NotifierQueueService;\n\n\t/**\n\t * Notifier configuration\n\t */\n    private readonly config: NotifierConfig;\n\n\t/**\n\t * Queue service observable subscription (saved for cleanup)\n\t */\n    private queueServiceSubscription: Subscription;\n\n\t/**\n\t * Promise resolve function reference, temporarily used while the notification child component gets created\n\t */\n    private tempPromiseResolver: () => void;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param changeDetector       Change detector, used for manually triggering change detection runs\n\t * @param notifierQueueService Notifier queue service\n\t * @param notifierService      Notifier service\n\t */\n    public constructor(changeDetector: ChangeDetectorRef, notifierQueueService: NotifierQueueService, notifierService: NotifierService) {\n        this.changeDetector = changeDetector;\n        this.queueService = notifierQueueService;\n        this.config = notifierService.getConfig();\n        this.notifications = [];\n    }\n\n\t/**\n\t * Component initialization lifecycle hook, connects this component to the action queue, and then handles incoming actions\n\t */\n    public ngOnInit(): void {\n        this.queueServiceSubscription = this.queueService.actionStream.subscribe((action: NotifierAction) => {\n            this.handleAction(action).then(() => {\n                this.queueService.continue();\n            });\n        });\n    }\n\n\t/**\n\t * Component destroyment lifecycle hook, cleans up the observable subsciption\n\t */\n    public ngOnDestroy(): void {\n        if (this.queueServiceSubscription) {\n            this.queueServiceSubscription.unsubscribe();\n        }\n    }\n\n\t/**\n\t * Notification identifier, used as the ngFor trackby function\n\t *\n\t * @param   index        Index\n\t * @param   notification Notifier notification\n\t * @returns Notification ID as the unique identnfier\n\t */\n    public identifyNotification(index: number, notification: NotifierNotification): string {\n        return notification.id;\n    }\n\n\t/**\n\t * Event handler, handles clicks on notification dismiss buttons\n\t *\n\t * @param notificationId ID of the notification to dismiss\n\t */\n    public onNotificationDismiss(notificationId: string): void {\n        this.queueService.push({\n            payload: notificationId,\n            type: 'HIDE'\n        });\n    }\n\n\t/**\n\t * Event handler, handles notification ready events\n\t *\n\t * @param notificationComponent Notification component reference\n\t */\n    public onNotificationReady(notificationComponent: NotifierNotificationComponent): void {\n        let currentNotification: NotifierNotification = this.notifications[this.notifications.length - 1]; // Get the latest notification\n        currentNotification.component = notificationComponent; // Save the new omponent reference\n        this.continueHandleShowAction(currentNotification); // Continue with handling the show action\n    }\n\n\t/**\n\t * Handle incoming actions by mapping action types to methods, and then running them\n\t *\n\t * @param   action Action object\n\t * @returns Promise, resolved when done\n\t */\n    private handleAction(action: NotifierAction): Promise<undefined> {\n        switch (action.type) { // TODO: Maybe a map (actionType -> class method) is a cleaner solution here?\n            case 'SHOW':\n                return this.handleShowAction(action);\n            case 'HIDE':\n                return this.handleHideAction(action);\n            case 'HIDE_OLDEST':\n                return this.handleHideOldestAction(action);\n            case 'HIDE_NEWEST':\n                return this.handleHideNewestAction(action);\n            case 'HIDE_ALL':\n                return this.handleHideAllAction(action);\n            default:\n                return new Promise<undefined>((resolve: () => void, reject: () => void) => {\n                    resolve(); // Ignore unknown action types\n                });\n        }\n    }\n\n\t/**\n\t * Show a new notification\n\t *\n\t * We simply add the notification to the list, and then wait until its properly initialized / created / rendered.\n\t *\n\t * @param   action Action object\n\t * @returns Promise, resolved when done\n\t */\n    private handleShowAction(action: NotifierAction): Promise<undefined> {\n        return new Promise<undefined>((resolve: () => void, reject: () => void) => {\n            this.tempPromiseResolver = resolve; // Save the promise resolve function so that it can be called later on by another method\n            this.addNotificationToList(new NotifierNotification(action.payload));\n        });\n    }\n\n\t/**\n\t * Continue to show a new notification (after the notification components is initialized / created / rendered).\n\t *\n\t * If this is the first (and thus only) notification, we can simply show it. Otherwhise, if stacking is disabled (or a low value), we\n\t * switch out notifications, in particular we hide the existing one, and then show our new one. Yet, if stacking is enabled, we first\n\t * shift all older notifications, and then show our new notification. In addition, if there are too many notification on the screen,\n\t * we hide the oldest one first. Furthermore, if configured, animation overlapping is applied.\n\t *\n\t * @param notification New notification to show\n\t */\n    private continueHandleShowAction(notification: NotifierNotification): void {\n\n        // First (which means only one) notification in the list?\n        const numberOfNotifications: number = this.notifications.length;\n        if (numberOfNotifications === 1) {\n            notification.component.show().then(this.tempPromiseResolver); // Done\n        } else {\n\n            const implicitStackingLimit: number = 2;\n\n            // Stacking enabled? (stacking value below 2 means stacking is disabled)\n            if (this.config.behaviour.stacking === false || this.config.behaviour.stacking < implicitStackingLimit) {\n                this.notifications[0].component.hide().then(() => {\n                    this.removeNotificationFromList(this.notifications[0]);\n                    notification.component.show().then(this.tempPromiseResolver); // Done\n                });\n            } else {\n\n                const stepPromises: Array<Promise<undefined>> = [];\n\n                // Are there now too many notifications?\n                if (numberOfNotifications > this.config.behaviour.stacking) {\n\n                    const oldNotifications: Array<NotifierNotification> = this.notifications.slice(1, numberOfNotifications - 1);\n\n                    // Are animations enabled?\n                    if (this.config.animations.enabled) {\n\n                        // Is animation overlap enabled?\n                        if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                            stepPromises.push(this.notifications[0].component.hide());\n                            setTimeout(() => {\n                                stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                            }, this.config.animations.hide.speed - this.config.animations.overlap);\n                            setTimeout(() => {\n                                stepPromises.push(notification.component.show());\n                            }, this.config.animations.hide.speed + this.config.animations.shift.speed - this.config.animations.overlap);\n                        } else {\n                            stepPromises.push(new Promise<undefined>((resolve: () => void, reject: () => void) => {\n                                this.notifications[0].component.hide().then(() => {\n                                    this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(() => {\n                                        notification.component.show().then(resolve);\n                                    });\n                                });\n                            }));\n                        }\n\n                    } else {\n                        stepPromises.push(this.notifications[0].component.hide());\n                        stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                        stepPromises.push(notification.component.show());\n                    }\n\n                } else {\n\n                    const oldNotifications: Array<NotifierNotification> = this.notifications.slice(0, numberOfNotifications - 1);\n\n                    // Are animations enabled?\n                    if (this.config.animations.enabled) {\n\n                        // Is animation overlap enabled?\n                        if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                            setTimeout(() => {\n                                stepPromises.push(notification.component.show());\n                            }, this.config.animations.shift.speed - this.config.animations.overlap);\n                        } else {\n                            stepPromises.push(new Promise<undefined>((resolve: () => void, reject: () => void) => {\n                                this.shiftNotifications(oldNotifications, notification.component.getHeight(), true).then(() => {\n                                    notification.component.show().then(resolve);\n                                });\n                            }));\n                        }\n\n                    } else {\n                        stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), true));\n                        stepPromises.push(notification.component.show());\n                    }\n\n                }\n\n                Promise.all(stepPromises).then(() => {\n                    if (numberOfNotifications > this.config.behaviour.stacking) {\n                        this.removeNotificationFromList(this.notifications[0]);\n                    }\n                    this.tempPromiseResolver();\n                }); // Done\n\n            }\n\n        }\n\n    }\n\n\t/**\n\t * Hide an existing notification\n\t *\n\t * Fist, we skip everything if there are no notifications at all, or the given notification does not exist. Then, we hide the given\n\t * notification. If there exist older notifications, we then shift them around to fill the gap. Once both hiding the given notification\n\t * and shifting the older notificaitons is done, the given notification gets finally removed (from the DOM).\n\t *\n\t * @param   action Action object, payload contains the notification ID\n\t * @returns Promise, resolved when done\n\t */\n    private handleHideAction(action: NotifierAction): Promise<undefined> {\n        return new Promise<undefined>((resolve: () => void, reject: () => void) => {\n\n            const stepPromises: Array<Promise<undefined>> = [];\n\n            // Does the notification exist / are there even any notifications? (let's prevent accidential errors)\n            const notification: NotifierNotification | undefined = this.findNotificationById(action.payload);\n            if (notification === undefined) {\n                resolve();\n                return;\n            }\n\n            // Get older notifications\n            const notificationIndex: number | undefined = this.findNotificationIndexById(action.payload);\n            if (notificationIndex === undefined) {\n                resolve();\n                return;\n            }\n            const oldNotifications: Array<NotifierNotification> = this.notifications.slice(0, notificationIndex);\n\n            // Do older notifications exist, and thus do we need to shift other notifications as a consequence?\n            if (oldNotifications.length > 0) {\n\n                // Are animations enabled?\n                if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\n\n                    // Is animation overlap enabled?\n                    if (this.config.animations.overlap !== false && this.config.animations.overlap > 0) {\n                        stepPromises.push(notification.component.hide());\n                        setTimeout(() => {\n                            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n                        }, this.config.animations.hide.speed - this.config.animations.overlap);\n                    } else {\n                        notification.component.hide().then(() => {\n                            stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n                        });\n                    }\n                } else {\n                    stepPromises.push(notification.component.hide());\n                    stepPromises.push(this.shiftNotifications(oldNotifications, notification.component.getHeight(), false));\n                }\n\n            } else {\n\n                stepPromises.push(notification.component.hide());\n\n            }\n\n            // Wait until both hiding and shifting is done, then remove the notification from the list\n            Promise.all(stepPromises).then(() => {\n                this.removeNotificationFromList(notification);\n                resolve(); // Done\n            });\n\n        });\n\n    }\n\n\t/**\n\t * Hide the oldest notification (bridge to handleHideAction)\n\t *\n\t * @param   action Action object\n\t * @returns Promise, resolved when done\n\t */\n    private handleHideOldestAction(action: NotifierAction): Promise<undefined> {\n\n        // Are there any notifications? (prevent accidential errors)\n        if (this.notifications.length === 0) {\n            return new Promise<undefined>((resolve: () => void, reject: () => void) => {\n                resolve();\n            }); // Done\n        } else {\n            action.payload = this.notifications[0].id;\n            return this.handleHideAction(action);\n        }\n\n    }\n\n\t/**\n\t * Hide the newest notification (bridge to handleHideAction)\n\t *\n\t * @param   action Action object\n\t * @returns Promise, resolved when done\n\t */\n    private handleHideNewestAction(action: NotifierAction): Promise<undefined> {\n\n        // Are there any notifications? (prevent accidential errors)\n        if (this.notifications.length === 0) {\n            return new Promise<undefined>((resolve: () => void, reject: () => void) => {\n                resolve();\n            }); // Done\n        } else {\n            action.payload = this.notifications[this.notifications.length - 1].id;\n            return this.handleHideAction(action);\n        }\n\n    }\n\n\t/**\n\t * Hide all notifications at once\n\t *\n\t * @param   action Action object\n\t * @returns Promise, resolved when done\n\t */\n    private handleHideAllAction(action: NotifierAction): Promise<undefined> {\n        return new Promise<undefined>((resolve: () => void, reject: () => void) => {\n\n            // Are there any notifications? (prevent accidential errors)\n            const numberOfNotifications: number = this.notifications.length;\n            if (numberOfNotifications === 0) {\n                resolve(); // Done\n                return;\n            }\n\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.hide.speed > 0 && this.config.animations.hide.offset !== false &&\n                this.config.animations.hide.offset > 0) {\n\n                for (let i: number = numberOfNotifications - 1; i >= 0; i--) {\n                    const animationOffset: number = this.config.position.vertical.position === 'top' ? numberOfNotifications - 1 : i;\n                    setTimeout(() => {\n                        this.notifications[i].component.hide().then(() => {\n\n                            // Are we done here, was this the last notification to be hidden?\n                            if ((this.config.position.vertical.position === 'top' && i === 0) ||\n                                (this.config.position.vertical.position === 'bottom' && i === numberOfNotifications - 1)) {\n                                this.removeAllNotificationsFromList();\n                                resolve(); // Done\n                            }\n\n                        });\n                    }, this.config.animations.hide.offset * animationOffset);\n                }\n\n            } else {\n\n                let stepPromises: Array<Promise<undefined>> = [];\n                for (let i: number = numberOfNotifications - 1; i >= 0; i--) {\n                    stepPromises.push(this.notifications[i].component.hide());\n                }\n                Promise.all(stepPromises).then(() => {\n                    this.removeAllNotificationsFromList();\n                    resolve(); // Done\n                });\n\n            }\n\n        });\n    }\n\n\t/**\n\t * Shift multiple notifications at once\n\t *\n\t * @param   notifications List containing the notifications to be shifted\n\t * @param   distance      Distance to shift (in px)\n\t * @param   toMakePlace   Flag, defining in which direciton to shift\n\t * @returns Promise, resolved when done\n\t */\n    private shiftNotifications(notifications: Array<NotifierNotification>, distance: number, toMakePlace: boolean): Promise<undefined> {\n        return new Promise<undefined>((resolve: () => void, reject: () => void) => {\n\n            // Are there any notifications to shift?\n            if (notifications.length === 0) {\n                resolve();\n                return;\n            }\n\n            let notificationPromises: Array<Promise<undefined>> = [];\n            for (let i: number = notifications.length - 1; i >= 0; i--) {\n                notificationPromises.push(notifications[i].component.shift(distance, toMakePlace));\n            }\n            Promise.all(notificationPromises).then(resolve); // Done\n\n        });\n    }\n\n\t/**\n\t * Add a new notification to the list of notifications (triggers change detection)\n\t *\n\t * @param notification Notification to add to the list of notifications\n\t */\n    private addNotificationToList(notification: NotifierNotification): void {\n        this.notifications.push(notification);\n        this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n\n\t/**\n\t * Remove an existing notification from the list of notifications (triggers change detection)\n\t *\n\t * @param notification Notification to be removed from the list of notifications\n\t */\n    private removeNotificationFromList(notification: NotifierNotification): void {\n        this.notifications =\n            this.notifications.filter((item: NotifierNotification) => item.component !== notification.component);\n        this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n\n\t/**\n\t * Remove all notifications from the list (triggers change detection)\n\t */\n    private removeAllNotificationsFromList(): void {\n        this.notifications = [];\n        this.changeDetector.markForCheck(); // Run change detection because the notification list changed\n    }\n\n\t/**\n\t * Helper: Find a notification in the notification list by a given notification ID\n\t *\n\t * @param   notificationId Notification ID, used for finding notification\n\t * @returns Notification, undefined if not found\n\t */\n    private findNotificationById(notificationId: string): NotifierNotification | undefined {\n        return this.notifications.find((currentNotification: NotifierNotification) => currentNotification.id === notificationId);\n    }\n\n\t/**\n\t * Helper: Find a notification's index by a given notification ID\n\t *\n\t * @param   notificationId Notification ID, used for finding a notification's index\n\t * @returns Notification index, undefined if not found\n\t */\n    private findNotificationIndexById(notificationId: string): number | undefined {\n        const notificationIndex: number =\n            this.notifications.findIndex((currentNotification: NotifierNotification) => currentNotification.id === notificationId);\n        return (notificationIndex !== -1 ? notificationIndex : undefined);\n    }\n\n}\n","import { NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from './../models/notifier-animation.model';\n\n/**\n * Fade animation preset\n */\nexport const fade: NotifierAnimationPreset = {\n    hide: (): NotifierAnimationPresetKeyframes => {\n        return {\n            from: {\n                opacity: '1'\n            },\n            to: {\n                opacity: '0'\n            }\n        };\n    },\n    show: (): NotifierAnimationPresetKeyframes => {\n        return {\n            from: {\n                opacity: '0'\n            },\n            to: {\n                opacity: '1'\n            }\n        };\n    }\n};\n","import { NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from './../models/notifier-animation.model';\nimport { NotifierConfig } from './../models/notifier-config.model';\nimport { NotifierNotification } from './../models/notifier-notification.model';\n\n/**\n * Slide animation preset\n */\nexport const slide: NotifierAnimationPreset = {\n    hide: (notification: NotifierNotification): NotifierAnimationPresetKeyframes => {\n\n        // Prepare variables\n        const config: NotifierConfig = notification.component.getConfig();\n        const shift: number = notification.component.getShift();\n        let from: {\n            [animatablePropertyName: string]: string;\n        };\n        let to: {\n            [animatablePropertyName: string]: string;\n        };\n\n        // Configure variables, depending on configuration and component\n        if (config.position.horizontal.position === 'left') {\n            from = {\n                transform: `translate3d( 0, ${shift}px, 0 )`\n            };\n            to = {\n                transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), ${shift}px, 0 )`\n            };\n        } else if (config.position.horizontal.position === 'right') {\n            from = {\n                transform: `translate3d( 0, ${shift}px, 0 )`\n            };\n            to = {\n                transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), ${shift}px, 0 )`\n            };\n        } else {\n            let horizontalPosition: string;\n            if (config.position.vertical.position === 'top') {\n                horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;\n            } else {\n                horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;\n            }\n            from = {\n                transform: `translate3d( -50%, ${shift}px, 0 )`\n            };\n            to = {\n                transform: `translate3d( -50%, ${horizontalPosition}, 0 )`\n            };\n        }\n\n        // Done\n        return {\n            from,\n            to\n        };\n\n    },\n    show: (notification: NotifierNotification): NotifierAnimationPresetKeyframes => {\n\n        // Prepare variables\n        const config: NotifierConfig = notification.component.getConfig();\n        let from: {\n            [animatablePropertyName: string]: string;\n        };\n        let to: {\n            [animatablePropertyName: string]: string;\n        };\n\n        // Configure variables, depending on configuration and component\n        if (config.position.horizontal.position === 'left') {\n            from = {\n                transform: `translate3d( calc( -100% - ${config.position.horizontal.distance}px - 10px ), 0, 0 )`\n            };\n            to = {\n                transform: 'translate3d( 0, 0, 0 )'\n            };\n        } else if (config.position.horizontal.position === 'right') {\n            from = {\n                transform: `translate3d( calc( 100% + ${config.position.horizontal.distance}px + 10px ), 0, 0 )`\n            };\n            to = {\n                transform: 'translate3d( 0, 0, 0 )'\n            };\n        } else {\n            let horizontalPosition: string;\n            if (config.position.vertical.position === 'top') {\n                horizontalPosition = `calc( -100% - ${config.position.horizontal.distance}px - 10px )`;\n            } else {\n                horizontalPosition = `calc( 100% + ${config.position.horizontal.distance}px + 10px )`;\n            }\n            from = {\n                transform: `translate3d( -50%, ${horizontalPosition}, 0 )`\n            };\n            to = {\n                transform: 'translate3d( -50%, 0, 0 )'\n            };\n        }\n\n        // Done\n        return {\n            from,\n            to\n        };\n\n    }\n};\n","import { Injectable } from '@angular/core';\n\nimport { NotifierAnimationData, NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from './../models/notifier-animation.model';\nimport { NotifierNotification } from './../models/notifier-notification.model';\nimport { fade } from './../animation-presets/fade.animation-preset';\nimport { slide } from './../animation-presets/slide.animation-preset';\n\n/**\n * Notifier animation service\n */\n@Injectable()\nexport class NotifierAnimationService {\n\n\t/**\n\t * List of animation presets (currently static)\n\t */\n    private readonly animationPresets: {\n        [animationPresetName: string]: NotifierAnimationPreset\n    };\n\n\t/**\n\t * Constructor\n\t */\n    public constructor() {\n        this.animationPresets = {\n            fade,\n            slide\n        };\n    }\n\n\t/**\n\t * Get animation data\n\t *\n\t * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation\n\t * direction (either in or out) as well as the notifications (and its attributes) itself.\n\t *\n\t * @param   direction    Animation direction, either in or out\n\t * @param   notification Notification the animation data should be generated for\n\t * @returns Animation information\n\t */\n    public getAnimationData(direction: 'show' | 'hide', notification: NotifierNotification): NotifierAnimationData {\n\n        // Get all necessary animation data\n        let keyframes: NotifierAnimationPresetKeyframes;\n        let duration: number;\n        let easing: string;\n        if (direction === 'show') {\n            keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);\n            duration = notification.component.getConfig().animations.show.speed;\n            easing = notification.component.getConfig().animations.show.easing;\n        } else {\n            keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);\n            duration = notification.component.getConfig().animations.hide.speed;\n            easing = notification.component.getConfig().animations.hide.easing;\n        }\n\n        // Build and return animation data\n        return {\n            keyframes: [\n                keyframes.from,\n                keyframes.to\n            ],\n            options: {\n                duration,\n                easing,\n                fill: 'forwards' // Keep the newly painted state after the animation finished\n            }\n        };\n\n    }\n\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Notifier timer service\n *\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\n */\n@Injectable()\nexport class NotifierTimerService {\n\n\t/**\n\t * Timestamp (in ms), created in the moment the timer starts\n\t */\n    private now: number;\n\n\t/**\n\t * Remaining time (in ms)\n\t */\n    private remaining: number;\n\n\t/**\n\t * Timeout ID, used for clearing the timeout later on\n\t */\n    private timerId: number;\n\n\t/**\n\t * Promise resolve function, eventually getting called once the timer finishes\n\t */\n    private finishPromiseResolver: () => void;\n\n\t/**\n\t * Constructor\n\t */\n    public constructor() {\n        this.now = 0;\n        this.remaining = 0;\n    }\n\n\t/**\n\t * Start (or resume) the timer\n\t *\n\t * @param   duration Timer duration, in ms\n\t * @returns          Promise, resolved once the timer finishes\n\t */\n    public start(duration: number): Promise<undefined> {\n        return new Promise<undefined>((resolve: () => void, reject: () => void) => {\n\n            // For the first run ...\n            this.remaining = duration;\n\n            // Setup, then start the timer\n            this.finishPromiseResolver = resolve;\n            this.continue();\n\n        });\n    }\n\n\t/**\n\t * Pause the timer\n\t */\n    public pause(): void {\n        clearTimeout(this.timerId);\n        this.remaining -= new Date().getTime() - this.now;\n    }\n\n\t/**\n\t * Continue the timer\n\t */\n    public continue(): void {\n        this.now = new Date().getTime();\n        this.timerId = window.setTimeout(() => {\n            this.finish();\n        }, this.remaining);\n    }\n\n\t/**\n\t * Stop the timer\n\t */\n    public stop(): void {\n        clearTimeout(this.timerId);\n        this.remaining = 0;\n    }\n\n\t/**\n\t * Finish up the timeout by resolving the timer promise\n\t */\n    private finish(): void {\n        this.finishPromiseResolver();\n    }\n\n}\n","import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';\n\nimport { NotifierAnimationData } from './../models/notifier-animation.model';\nimport { NotifierAnimationService } from './../services/notifier-animation.service';\nimport { NotifierConfig } from './../models/notifier-config.model';\nimport { NotifierNotification } from './../models/notifier-notification.model';\nimport { NotifierService } from './../services/notifier.service';\nimport { NotifierTimerService } from './../services/notifier-timer.service';\n\n/**\n * Notifier notification component\n * -------------------------------\n * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this\n * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.\n * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and\n * mouse movements.\n */\n@Component({\n    changeDetection: ChangeDetectionStrategy.OnPush, // (#perfmatters)\n    host: {\n        '(click)': 'onNotificationClick()',\n        '(mouseout)': 'onNotificationMouseout()',\n        '(mouseover)': 'onNotificationMouseover()',\n        class: 'notifier__notification'\n    },\n    providers: [\n        // We provide the timer to the component's local injector, so that every notification components gets its own\n        // instance of the timer service, thus running their timers independently from each other\n        NotifierTimerService\n    ],\n    selector: 'notifier-notification',\n    template: '<ng-container *ngIf=\"notification.template; else predefinedNotification\" [ngTemplateOutletContext]=\"{ notification: notification }\" [ngTemplateOutlet]=\"notification.template\"></ng-container><ng-template #predefinedNotification><p class=\"notifier__notification-message\">{{ notification.message }}</p><button (click)=\"onClickDismiss()\" *ngIf=\"config.behaviour.showDismissButton\" class=\"notifier__notification-button\" title=\"dismiss\" type=\"button\"><svg class=\"notifier__notification-button-icon\" height=\"20\" viewBox=\"0 0 24 24\" width=\"20\"><path d=\"M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z\"/></svg></button></ng-template>'\n})\nexport class NotifierNotificationComponent implements AfterViewInit {\n\n\t/**\n\t * Input: Notification object, contains all details necessary to construct the notification\n\t */\n    @Input()\n    public notification: NotifierNotification;\n\n\t/**\n\t * Output: Ready event, handles the initialization success by emitting a reference to this notification component\n\t */\n    @Output()\n    public ready: EventEmitter<NotifierNotificationComponent>;\n\n\t/**\n\t * Output: Dismiss event, handles the click on the dismiss button by emitting the notification ID of this notification component\n\t */\n    @Output()\n    public dismiss: EventEmitter<string>;\n\n\t/**\n\t * Notifier configuration\n\t */\n    public readonly config: NotifierConfig;\n\n\t/**\n\t * Notifier timer service\n\t */\n    private readonly timerService: NotifierTimerService;\n\n\t/**\n\t * Notifier animation service\n\t */\n    private readonly animationService: NotifierAnimationService;\n\n\t/**\n\t * Angular renderer, used to preserve the overall DOM abstraction & independence\n\t */\n    private readonly renderer: Renderer2;\n\n\t/**\n\t * Native element reference, used for manipulating DOM properties\n\t */\n    private readonly element: HTMLElement;\n\n\t/**\n\t * Current notification height, calculated and cached here (#perfmatters)\n\t */\n    private elementHeight: number;\n\n\t/**\n\t * Current notification width, calculated and cached here (#perfmatters)\n\t */\n    private elementWidth: number;\n\n\t/**\n\t * Current notification shift, calculated and cached here (#perfmatters)\n\t */\n    private elementShift: number;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param elementRef               Reference to the component's element\n\t * @param renderer                 Angular renderer\n\t * @param notifierService          Notifier service\n\t * @param notifierTimerService     Notifier timer service\n\t * @param notifierAnimationService Notifier animation service\n\t */\n    public constructor(elementRef: ElementRef, renderer: Renderer2, notifierService: NotifierService,\n        notifierTimerService: NotifierTimerService, notifierAnimationService: NotifierAnimationService) {\n        this.config = notifierService.getConfig();\n        this.ready = new EventEmitter<NotifierNotificationComponent>();\n        this.dismiss = new EventEmitter<string>();\n        this.timerService = notifierTimerService;\n        this.animationService = notifierAnimationService;\n        this.renderer = renderer;\n        this.element = elementRef.nativeElement;\n        this.elementShift = 0;\n    }\n\n\t/**\n\t * Component after view init lifecycle hook, setts up the component and then emits the ready event\n\t */\n    public ngAfterViewInit(): void {\n        this.setup();\n        this.elementHeight = this.element.offsetHeight;\n        this.elementWidth = this.element.offsetWidth;\n        this.ready.emit(this);\n    }\n\n\t/**\n\t * Get the notifier config\n\t *\n\t * @returns Notifier configuration\n\t */\n    public getConfig(): NotifierConfig {\n        return this.config;\n    }\n\n\t/**\n\t * Get notification element height (in px)\n\t *\n\t * @returns Notification element height (in px)\n\t */\n    public getHeight(): number {\n        return this.elementHeight;\n    }\n\n\t/**\n\t * Get notification element width (in px)\n\t *\n\t * @returns Notification element height (in px)\n\t */\n    public getWidth(): number {\n        return this.elementWidth;\n    }\n\n\t/**\n\t * Get notification shift offset (in px)\n\t *\n\t * @returns Notification element shift offset (in px)\n\t */\n    public getShift(): number {\n        return this.elementShift;\n    }\n\n\t/**\n\t * Show (animate in) this notification\n\t *\n\t * @returns Promise, resolved when done\n\t */\n    public show(): Promise<undefined> {\n        return new Promise<undefined>((resolve: () => void, reject: () => void) => {\n\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.show.speed > 0) {\n\n                // Get animation data\n                const animationData: NotifierAnimationData = this.animationService.getAnimationData('show', this.notification);\n\n                // Set initial styles (styles before animation), prevents quick flicker when animation starts\n                const animatedProperties: Array<string> = Object.keys(animationData.keyframes[0]);\n                for (let i: number = animatedProperties.length - 1; i >= 0; i--) {\n                    this.renderer.setStyle(this.element, animatedProperties[i],\n                        animationData.keyframes[0][animatedProperties[i]]);\n                }\n\n                // Animate notification in\n                this.renderer.setStyle(this.element, 'visibility', 'visible');\n                const animation: Animation = this.element.animate(animationData.keyframes, animationData.options);\n                animation.onfinish = () => {\n                    this.startAutoHideTimer();\n                    resolve(); // Done\n                };\n\n            } else {\n\n                // Show notification\n                this.renderer.setStyle(this.element, 'visibility', 'visible');\n                this.startAutoHideTimer();\n                resolve(); // Done\n\n            }\n\n        });\n\n    }\n\n\t/**\n\t * Hide (animate out) this notification\n\t *\n\t * @returns Promise, resolved when done\n\t */\n    public hide(): Promise<undefined> {\n        return new Promise<undefined>((resolve: () => void, reject: () => void) => {\n\n            this.stopAutoHideTimer();\n\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.hide.speed > 0) {\n                const animationData: NotifierAnimationData = this.animationService.getAnimationData('hide', this.notification);\n                const animation: Animation = this.element.animate(animationData.keyframes, animationData.options);\n                animation.onfinish = () => {\n                    resolve(); // Done\n                };\n            } else {\n                resolve(); // Done\n            }\n\n        });\n    }\n\n\t/**\n\t * Shift (move) this notification\n\t *\n\t * @param   distance         Distance to shift (in px)\n\t * @param   shiftToMakePlace Flag, defining in which direction to shift\n\t * @returns Promise, resolved when done\n\t */\n    public shift(distance: number, shiftToMakePlace: boolean): Promise<undefined> {\n        return new Promise<undefined>((resolve: () => void, reject: () => void) => {\n\n            // Calculate new position (position after the shift)\n            let newElementShift: number;\n            if ((this.config.position.vertical.position === 'top' && shiftToMakePlace)\n                || (this.config.position.vertical.position === 'bottom' && !shiftToMakePlace)) {\n                newElementShift = this.elementShift + distance + this.config.position.vertical.gap;\n            } else {\n                newElementShift = this.elementShift - distance - this.config.position.vertical.gap;\n            }\n            const horizontalPosition: string = this.config.position.horizontal.position === 'middle' ? '-50%' : '0';\n\n            // Are animations enabled?\n            if (this.config.animations.enabled && this.config.animations.shift.speed > 0) {\n                const animationData: NotifierAnimationData = { // TODO: Extract into animation service\n                    keyframes: [\n                        {\n                            transform: `translate3d( ${horizontalPosition}, ${this.elementShift}px, 0 )`\n                        },\n                        {\n                            transform: `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`\n                        }\n                    ],\n                    options: {\n                        duration: this.config.animations.shift.speed,\n                        easing: this.config.animations.shift.easing,\n                        fill: 'forwards'\n                    }\n                };\n                this.elementShift = newElementShift;\n                const animation: Animation = this.element.animate(animationData.keyframes, animationData.options);\n                animation.onfinish = () => {\n                    resolve(); // Done\n                };\n\n            } else {\n                this.renderer.setStyle(this.element, 'transform', `translate3d( ${horizontalPosition}, ${newElementShift}px, 0 )`);\n                this.elementShift = newElementShift;\n                resolve(); // Done\n            }\n\n        });\n\n    }\n\n\t/**\n\t * Handle click on dismiss button\n\t */\n    public onClickDismiss(): void {\n        this.dismiss.emit(this.notification.id);\n    }\n\n\t/**\n\t * Handle mouseover over notification area\n\t */\n    public onNotificationMouseover(): void {\n        if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n            this.pauseAutoHideTimer();\n        } else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n            this.stopAutoHideTimer();\n        }\n    }\n\n\t/**\n\t * Handle mouseout from notification area\n\t */\n    public onNotificationMouseout(): void {\n        if (this.config.behaviour.onMouseover === 'pauseAutoHide') {\n            this.continueAutoHideTimer();\n        } else if (this.config.behaviour.onMouseover === 'resetAutoHide') {\n            this.startAutoHideTimer();\n        }\n    }\n\n\t/**\n\t * Handle click on notification area\n\t */\n    public onNotificationClick(): void {\n        if (this.config.behaviour.onClick === 'hide') {\n            this.onClickDismiss();\n        }\n    }\n\n\t/**\n\t * Start the auto hide timer (if enabled)\n\t */\n    private startAutoHideTimer(): void {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.start(this.config.behaviour.autoHide).then(() => {\n                this.onClickDismiss();\n            });\n        }\n    }\n\n\t/**\n\t * Pause the auto hide timer (if enabled)\n\t */\n    private pauseAutoHideTimer(): void {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.pause();\n        }\n    }\n\n\t/**\n\t * Continue the auto hide timer (if enabled)\n\t */\n    private continueAutoHideTimer(): void {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.continue();\n        }\n    }\n\n\t/**\n\t * Stop the auto hide timer (if enabled)\n\t */\n    private stopAutoHideTimer(): void {\n        if (this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0) {\n            this.timerService.stop();\n        }\n    }\n\n\t/**\n\t * Initial notification setup\n\t */\n    private setup(): void {\n\n        // Set start position (initially the exact same for every new notification)\n        if (this.config.position.horizontal.position === 'left') {\n            this.renderer.setStyle(this.element, 'left', `${this.config.position.horizontal.distance}px`);\n        } else if (this.config.position.horizontal.position === 'right') {\n            this.renderer.setStyle(this.element, 'right', `${this.config.position.horizontal.distance}px`);\n        } else {\n            this.renderer.setStyle(this.element, 'left', '50%');\n            // Let's get the GPU handle some work as well (#perfmatters)\n            this.renderer.setStyle(this.element, 'transform', 'translate3d( -50%, 0, 0 )');\n        }\n        if (this.config.position.vertical.position === 'top') {\n            this.renderer.setStyle(this.element, 'top', `${this.config.position.vertical.distance}px`);\n        } else {\n            this.renderer.setStyle(this.element, 'bottom', `${this.config.position.vertical.distance}px`);\n        }\n\n        // Add classes (responsible for visual design)\n        this.renderer.addClass(this.element, `notifier__notification--${this.notification.type}`);\n        this.renderer.addClass(this.element, `notifier__notification--${this.config.theme}`);\n\n    }\n\n}\n","import { CommonModule } from '@angular/common';\nimport { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { NotifierContainerComponent } from './components/notifier-container.component';\nimport { NotifierNotificationComponent } from './components/notifier-notification.component';\nimport { NotifierConfig, NotifierOptions } from './models/notifier-config.model';\nimport { NotifierAnimationService } from './services/notifier-animation.service';\nimport { NotifierQueueService } from './services/notifier-queue.service';\nimport { NotifierService } from './services/notifier.service';\n\n// tslint:disable variable-name\n\n/**\n * Injection Token for notifier options\n */\nexport const NotifierOptionsToken: InjectionToken<NotifierOptions>\n    = new InjectionToken<NotifierOptions>('[angular-notifier] Notifier Options');\n\n/**\n * Injection Token for notifier configuration\n */\nexport const NotifierConfigToken: InjectionToken<NotifierConfig>\n    = new InjectionToken<NotifierConfig>('[anuglar-notifier] Notifier Config');\n\n// tslint:enable variable-name\n\n/**\n * Factory for a notifier configuration with custom options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @param   options - Custom notifier options\n * @returns - Notifier configuration as result\n */\nexport function notifierCustomConfigFactory(options: NotifierOptions): NotifierConfig {\n    return new NotifierConfig(options);\n}\n\n/**\n * Factory for a notifier configuration with default options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @returns - Notifier configuration as result\n */\nexport function notifierDefaultConfigFactory(): NotifierConfig {\n    return new NotifierConfig({});\n}\n\n/**\n * Notifier module\n */\n@NgModule({\n    declarations: [\n        NotifierContainerComponent,\n        NotifierNotificationComponent\n    ],\n    exports: [\n        NotifierContainerComponent\n    ],\n    imports: [\n        CommonModule\n    ],\n    providers: [\n        NotifierAnimationService,\n        NotifierService,\n        NotifierQueueService,\n\n        // Provide the default notifier configuration if just the module is imported\n        {\n            provide: NotifierConfigToken,\n            useFactory: notifierDefaultConfigFactory\n        }\n\n    ]\n})\nexport class NotifierModule {\n\n\t/**\n\t * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options\n\t *\n\t * @param   [options={}] - Custom notifier options\n\t * @returns - Notifier module with custom providers\n\t */\n    public static withConfig(options: NotifierOptions = {}): ModuleWithProviders {\n        return {\n            ngModule: NotifierModule,\n            providers: [\n\n                // Provide the options itself upfront (as we need to inject them as dependencies -- see below)\n                {\n                    provide: NotifierOptionsToken,\n                    useValue: options\n                },\n\n                // Provide a custom notifier configuration, based on the given notifier options\n                {\n                    deps: [\n                        NotifierOptionsToken\n                    ],\n                    provide: NotifierConfigToken,\n                    useFactory: notifierCustomConfigFactory\n                }\n\n            ]\n        };\n    }\n\n}\n"],"names":["Subject","Injectable","Inject","forwardRef","Component","ChangeDetectionStrategy","ChangeDetectorRef","EventEmitter","ElementRef","Renderer2","Input","Output","InjectionToken","NgModule","CommonModule"],"mappings":";;;;;;;;;;;;;;;IAQA;;;;;IAAA;sCAqCuB,OAAoC;;;;;4BAZlB,IAAI;YAarC,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;;;;YAK7B,IAAI,OAAO,CAAC,EAAE,KAAK,SAAS,EAAE;gBAC1B,IAAI,CAAC,EAAE,GAAG,QAAM,IAAI,IAAI,EAAE,CAAC,OAAO,EAAI,CAAC;aAC1C;;mCArDT;QAuDC,CAAA;;;;;;ACvDD;;;;;;;;;;;;;YAuCQ,IAAI,CAAC,YAAY,GAAG,IAAIA,YAAO,EAAkB,CAAC;YAClD,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;YACtB,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;;;;;;;;QAQ7B,mCAAI;;;;;;kBAAC,MAAsB;YAC9B,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC9B,IAAI,CAAC,kBAAkB,EAAE,CAAC;;;;;;QAMvB,uCAAQ;;;;;YACX,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAChC,IAAI,CAAC,kBAAkB,EAAE,CAAC;;;;;;QAMtB,iDAAkB;;;;;YACtB,IAAI,IAAI,CAAC,kBAAkB,IAAI,IAAI,CAAC,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC1D,OAAO;aACV;YACD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;YAC/B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;;;oBArDxDC,eAAU;;;;mCAjBX;;;;;;;;;;;;;;ACgDA;;;;;;;IAAA;gCA6DuB,aAAmC;YAAnC,8BAAA,EAAA,kBAAmC;;YAGlD,IAAI,CAAC,UAAU,GAAG;gBACd,OAAO,EAAE,IAAI;gBACb,IAAI,EAAE;oBACF,MAAM,EAAE,MAAM;oBACd,MAAM,EAAE,EAAE;oBACV,MAAM,EAAE,MAAM;oBACd,KAAK,EAAE,GAAG;iBACb;gBACD,OAAO,EAAE,GAAG;gBACZ,KAAK,EAAE;oBACH,MAAM,EAAE,MAAM;oBACd,KAAK,EAAE,GAAG;iBACb;gBACD,IAAI,EAAE;oBACF,MAAM,EAAE,MAAM;oBACd,MAAM,EAAE,OAAO;oBACf,KAAK,EAAE,GAAG;iBACb;aACJ,CAAC;YACF,IAAI,CAAC,SAAS,GAAG;gBACb,QAAQ,EAAE,IAAI;gBACd,OAAO,EAAE,KAAK;gBACd,WAAW,EAAE,eAAe;gBAC5B,iBAAiB,EAAE,IAAI;gBACvB,QAAQ,EAAE,CAAC;aACd,CAAC;YACF,IAAI,CAAC,QAAQ,GAAG;gBACZ,UAAU,EAAE;oBACR,QAAQ,EAAE,EAAE;oBACZ,QAAQ,EAAE,MAAM;iBACnB;gBACD,QAAQ,EAAE;oBACN,QAAQ,EAAE,EAAE;oBACZ,GAAG,EAAE,EAAE;oBACP,QAAQ,EAAE,QAAQ;iBACrB;aACJ,CAAC;YACF,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC;;;;YAKxB,IAAI,aAAa,CAAC,KAAK,KAAK,SAAS,EAAE;gBACnC,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC;aACpC;YACD,IAAI,aAAa,CAAC,UAAU,KAAK,SAAS,EAAE;gBACxC,IAAI,aAAa,CAAC,UAAU,CAAC,OAAO,KAAK,SAAS,EAAE;oBAChD,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC;iBAC9D;gBACD,IAAI,aAAa,CAAC,UAAU,CAAC,OAAO,KAAK,SAAS,EAAE;oBAChD,IAAI,CAAC,UAAU,CAAC,OAAO,GAAG,aAAa,CAAC,UAAU,CAAC,OAAO,CAAC;iBAC9D;gBACD,IAAI,aAAa,CAAC,UAAU,CAAC,IAAI,KAAK,SAAS,EAAE;oBAC7C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;iBACtE;gBACD,IAAI,aAAa,CAAC,UAAU,CAAC,KAAK,KAAK,SAAS,EAAE;oBAC9C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,aAAa,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;iBACxE;gBACD,IAAI,aAAa,CAAC,UAAU,CAAC,IAAI,KAAK,SAAS,EAAE;oBAC7C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,aAAa,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;iBACtE;aACJ;YACD,IAAI,aAAa,CAAC,SAAS,KAAK,SAAS,EAAE;gBACvC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,EAAE,aAAa,CAAC,SAAS,CAAC,CAAC;aAC1D;YACD,IAAI,aAAa,CAAC,QAAQ,KAAK,SAAS,EAAE;gBACtC,IAAI,aAAa,CAAC,QAAQ,CAAC,UAAU,KAAK,SAAS,EAAE;oBACjD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,aAAa,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;iBAC9E;gBACD,IAAI,aAAa,CAAC,QAAQ,CAAC,QAAQ,KAAK,SAAS,EAAE;oBAC/C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,aAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;iBAC1E;aACJ;;6BAxLT;QA4LC;;;;;;AC5LD;;;;;;;;iCAkCQ,oBAA0C,EACK,MAAsB;;YAErE,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC;YACzC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;;;;;;;QAQlB,mCAAS;;;;;;YACZ,OAAO,IAAI,CAAC,MAAM,CAAC;;;;;;;;QAQhB,8BAAI;;;;;;kBAAC,mBAAgD;YACxD,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,mBAAmB;gBAC5B,IAAI,EAAE,MAAM;aACf,CAAC,CAAC;;;;;;;;QAQA,8BAAI;;;;;;kBAAC,cAAsB;YAC9B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,cAAc;gBACvB,IAAI,EAAE,MAAM;aACf,CAAC,CAAC;;;;;;QAMA,oCAAU;;;;;YACb,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;gBACnB,IAAI,EAAE,aAAa;aACtB,CAAC,CAAC;;;;;;QAMA,oCAAU;;;;;YACb,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;gBACnB,IAAI,EAAE,aAAa;aACtB,CAAC,CAAC;;;;;;QAMA,iCAAO;;;;;YACV,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;gBACnB,IAAI,EAAE,UAAU;aACnB,CAAC,CAAC;;;;;;;;;;QAUA,gCAAM;;;;;;;;kBAAC,IAAY,EAAE,OAAe,EAAE,cAAuB;;YAChE,IAAI,mBAAmB,GAAgC;gBACnD,OAAO,SAAA;gBACP,IAAI,MAAA;aACP,CAAC;YACF,IAAI,cAAc,KAAK,SAAS,EAAE;gBAC9B,mBAAmB,CAAC,EAAE,GAAG,cAAc,CAAC;aAC3C;YACD,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;;;oBAtGtCA,eAAU;;;;oBAVF,oBAAoB;oBAFpB,cAAc,uBAiCdC,WAAM,SAACC,eAAU,CAAC,cAAM,OAAA,mBAAmB,GAAA,CAAC;;8BAnCrD;;;;;;;ACAA;;;;;;;;;;;;;;4CAuEuB,cAAiC,EAAE,oBAA0C,EAAE,eAAgC;YAC9H,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;YACrC,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC;YACzC,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,SAAS,EAAE,CAAC;YAC1C,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;;;;;;QAMrB,6CAAQ;;;;;;YACX,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC,UAAC,MAAsB;gBAC5F,KAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC;oBAC3B,KAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;iBAChC,CAAC,CAAC;aACN,CAAC,CAAC;;;;;;QAMA,gDAAW;;;;;YACd,IAAI,IAAI,CAAC,wBAAwB,EAAE;gBAC/B,IAAI,CAAC,wBAAwB,CAAC,WAAW,EAAE,CAAC;aAC/C;;;;;;;;;QAUE,yDAAoB;;;;;;;kBAAC,KAAa,EAAE,YAAkC;YACzE,OAAO,YAAY,CAAC,EAAE,CAAC;;;;;;;;QAQpB,0DAAqB;;;;;;kBAAC,cAAsB;YAC/C,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;gBACnB,OAAO,EAAE,cAAc;gBACvB,IAAI,EAAE,MAAM;aACf,CAAC,CAAC;;;;;;;;QAQA,wDAAmB;;;;;;kBAAC,qBAAoD;;YAC3E,IAAI,mBAAmB,GAAyB,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAClG,mBAAmB,CAAC,SAAS,GAAG,qBAAqB,CAAC;YACtD,IAAI,CAAC,wBAAwB,CAAC,mBAAmB,CAAC,CAAC;;;;;;;;QAS/C,iDAAY;;;;;;kBAAC,MAAsB;YACvC,QAAQ,MAAM,CAAC,IAAI;;gBACf,KAAK,MAAM;oBACP,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;gBACzC,KAAK,MAAM;oBACP,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;gBACzC,KAAK,aAAa;oBACd,OAAO,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;gBAC/C,KAAK,aAAa;oBACd,OAAO,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC;gBAC/C,KAAK,UAAU;oBACX,OAAO,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;gBAC5C;oBACI,OAAO,IAAI,OAAO,CAAY,UAAC,OAAmB,EAAE,MAAkB;wBAClE,OAAO,EAAE,CAAC;qBACb,CAAC,CAAC;aACV;;;;;;;;;;QAWG,qDAAgB;;;;;;;;kBAAC,MAAsB;;YAC3C,OAAO,IAAI,OAAO,CAAY,UAAC,OAAmB,EAAE,MAAkB;gBAClE,KAAI,CAAC,mBAAmB,GAAG,OAAO,CAAC;gBACnC,KAAI,CAAC,qBAAqB,CAAC,IAAI,oBAAoB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;aACxE,CAAC,CAAC;;;;;;;;;;;;;QAaC,6DAAwB;;;;;;;;;;;kBAAC,YAAkC;;;YAG/D,IAAM,qBAAqB,GAAW,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC;YAChE,IAAI,qBAAqB,KAAK,CAAC,EAAE;gBAC7B,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;aAChE;iBAAM;;gBAEH,IAAM,qBAAqB,GAAW,CAAC,CAAC;;gBAGxC,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,qBAAqB,EAAE;oBACpG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;wBACxC,KAAI,CAAC,0BAA0B,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;wBACvD,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,KAAI,CAAC,mBAAmB,CAAC,CAAC;qBAChE,CAAC,CAAC;iBACN;qBAAM;;oBAEH,IAAM,cAAY,GAA8B,EAAE,CAAC;;oBAGnD,IAAI,qBAAqB,GAAG,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE;;wBAExD,IAAM,kBAAgB,GAAgC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,qBAAqB,GAAG,CAAC,CAAC,CAAC;;wBAG7G,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE;;4BAGhC,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,GAAG,CAAC,EAAE;gCAChF,cAAY,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;gCAC1D,UAAU,CAAC;oCACP,cAAY,CAAC,IAAI,CAAC,KAAI,CAAC,kBAAkB,CAAC,kBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;iCAC1G,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gCACvE,UAAU,CAAC;oCACP,cAAY,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;iCACpD,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;6BAC/G;iCAAM;gCACH,cAAY,CAAC,IAAI,CAAC,IAAI,OAAO,CAAY,UAAC,OAAmB,EAAE,MAAkB;oCAC7E,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;wCACxC,KAAI,CAAC,kBAAkB,CAAC,kBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC;4CACrF,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;yCAC/C,CAAC,CAAC;qCACN,CAAC,CAAC;iCACN,CAAC,CAAC,CAAC;6BACP;yBAEJ;6BAAM;4BACH,cAAY,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;4BAC1D,cAAY,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,kBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;4BACvG,cAAY,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;yBACpD;qBAEJ;yBAAM;;wBAEH,IAAM,kBAAgB,GAAgC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,qBAAqB,GAAG,CAAC,CAAC,CAAC;;wBAG7G,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE;;4BAGhC,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,GAAG,CAAC,EAAE;gCAChF,cAAY,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,kBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;gCACvG,UAAU,CAAC;oCACP,cAAY,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;iCACpD,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;6BAC3E;iCAAM;gCACH,cAAY,CAAC,IAAI,CAAC,IAAI,OAAO,CAAY,UAAC,OAAmB,EAAE,MAAkB;oCAC7E,KAAI,CAAC,kBAAkB,CAAC,kBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC,IAAI,CAAC;wCACrF,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qCAC/C,CAAC,CAAC;iCACN,CAAC,CAAC,CAAC;6BACP;yBAEJ;6BAAM;4BACH,cAAY,CAAC,IAAI,CAAC,IAAI,CAAC,kBAAkB,CAAC,kBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;4BACvG,cAAY,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;yBACpD;qBAEJ;oBAED,OAAO,CAAC,GAAG,CAAC,cAAY,CAAC,CAAC,IAAI,CAAC;wBAC3B,IAAI,qBAAqB,GAAG,KAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,EAAE;4BACxD,KAAI,CAAC,0BAA0B,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC;yBAC1D;wBACD,KAAI,CAAC,mBAAmB,EAAE,CAAC;qBAC9B,CAAC,CAAC;iBAEN;aAEJ;;;;;;;;;;;;QAcG,qDAAgB;;;;;;;;;;kBAAC,MAAsB;;YAC3C,OAAO,IAAI,OAAO,CAAY,UAAC,OAAmB,EAAE,MAAkB;;gBAElE,IAAM,YAAY,GAA8B,EAAE,CAAC;;gBAGnD,IAAM,YAAY,GAAqC,KAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACjG,IAAI,YAAY,KAAK,SAAS,EAAE;oBAC5B,OAAO,EAAE,CAAC;oBACV,OAAO;iBACV;;gBAGD,IAAM,iBAAiB,GAAuB,KAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBAC7F,IAAI,iBAAiB,KAAK,SAAS,EAAE;oBACjC,OAAO,EAAE,CAAC;oBACV,OAAO;iBACV;;gBACD,IAAM,gBAAgB,GAAgC,KAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,iBAAiB,CAAC,CAAC;;gBAGrG,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;;oBAG7B,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE;;wBAGzE,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,KAAK,KAAK,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,GAAG,CAAC,EAAE;4BAChF,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;4BACjD,UAAU,CAAC;gCACP,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;6BAC3G,EAAE,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;yBAC1E;6BAAM;4BACH,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;gCAC/B,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;6BAC3G,CAAC,CAAC;yBACN;qBACJ;yBAAM;wBACH,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;wBACjD,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;qBAC3G;iBAEJ;qBAAM;oBAEH,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;iBAEpD;;gBAGD,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC;oBAC3B,KAAI,CAAC,0BAA0B,CAAC,YAAY,CAAC,CAAC;oBAC9C,OAAO,EAAE,CAAC;iBACb,CAAC,CAAC;aAEN,CAAC,CAAC;;;;;;;;QAUC,2DAAsB;;;;;;kBAAC,MAAsB;;YAGjD,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;gBACjC,OAAO,IAAI,OAAO,CAAY,UAAC,OAAmB,EAAE,MAAkB;oBAClE,OAAO,EAAE,CAAC;iBACb,CAAC,CAAC;aACN;iBAAM;gBACH,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;gBAC1C,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;aACxC;;;;;;;;QAUG,2DAAsB;;;;;;kBAAC,MAAsB;;YAGjD,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;gBACjC,OAAO,IAAI,OAAO,CAAY,UAAC,OAAmB,EAAE,MAAkB;oBAClE,OAAO,EAAE,CAAC;iBACb,CAAC,CAAC;aACN;iBAAM;gBACH,MAAM,CAAC,OAAO,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;gBACtE,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;aACxC;;;;;;;;QAUG,wDAAmB;;;;;;kBAAC,MAAsB;;YAC9C,OAAO,IAAI,OAAO,CAAY,UAAC,OAAmB,EAAE,MAAkB;;gBAGlE,IAAM,qBAAqB,GAAW,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC;gBAChE,IAAI,qBAAqB,KAAK,CAAC,EAAE;oBAC7B,OAAO,EAAE,CAAC;oBACV,OAAO;iBACV;;gBAGD,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,KAAK,KAAK;oBACvH,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;4CAE/B,CAAC;;wBACN,IAAM,eAAe,GAAW,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,GAAG,qBAAqB,GAAG,CAAC,GAAG,CAAC,CAAC;wBACjH,UAAU,CAAC;4BACP,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;;gCAGxC,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,IAAI,CAAC,KAAK,CAAC;qCAC3D,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,QAAQ,IAAI,CAAC,KAAK,qBAAqB,GAAG,CAAC,CAAC,EAAE;oCAC1F,KAAI,CAAC,8BAA8B,EAAE,CAAC;oCACtC,OAAO,EAAE,CAAC;iCACb;6BAEJ,CAAC,CAAC;yBACN,EAAE,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,CAAC;;oBAb7D,KAAK,IAAI,CAAC,GAAW,qBAAqB,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;gCAAlD,CAAC;qBAcT;iBAEJ;qBAAM;;oBAEH,IAAI,YAAY,GAA8B,EAAE,CAAC;oBACjD,KAAK,IAAI,CAAC,GAAW,qBAAqB,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;wBACzD,YAAY,CAAC,IAAI,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;qBAC7D;oBACD,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC;wBAC3B,KAAI,CAAC,8BAA8B,EAAE,CAAC;wBACtC,OAAO,EAAE,CAAC;qBACb,CAAC,CAAC;iBAEN;aAEJ,CAAC,CAAC;;;;;;;;;;QAWC,uDAAkB;;;;;;;;kBAAC,aAA0C,EAAE,QAAgB,EAAE,WAAoB;YACzG,OAAO,IAAI,OAAO,CAAY,UAAC,OAAmB,EAAE,MAAkB;;gBAGlE,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC5B,OAAO,EAAE,CAAC;oBACV,OAAO;iBACV;;gBAED,IAAI,oBAAoB,GAA8B,EAAE,CAAC;gBACzD,KAAK,IAAI,CAAC,GAAW,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;oBACxD,oBAAoB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC;iBACtF;gBACD,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAEnD,CAAC,CAAC;;;;;;;;QAQC,0DAAqB;;;;;;kBAAC,YAAkC;YAC5D,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YACtC,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;;;;;;;;QAQ/B,+DAA0B;;;;;;kBAAC,YAAkC;YACjE,IAAI,CAAC,aAAa;gBACd,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,UAAC,IAA0B,IAAK,OAAA,IAAI,CAAC,SAAS,KAAK,YAAY,CAAC,SAAS,GAAA,CAAC,CAAC;YACzG,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;;;;;;QAM/B,mEAA8B;;;;;YAClC,IAAI,CAAC,aAAa,GAAG,EAAE,CAAC;YACxB,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;;;;;;;;QAS/B,yDAAoB;;;;;;kBAAC,cAAsB;YAC/C,OAAO,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,UAAC,mBAAyC,IAAK,OAAA,mBAAmB,CAAC,EAAE,KAAK,cAAc,GAAA,CAAC,CAAC;;;;;;;;QASrH,8DAAyB;;;;;;kBAAC,cAAsB;;YACpD,IAAM,iBAAiB,GACnB,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,UAAC,mBAAyC,IAAK,OAAA,mBAAmB,CAAC,EAAE,KAAK,cAAc,GAAA,CAAC,CAAC;YAC3H,QAAQ,iBAAiB,KAAK,CAAC,CAAC,GAAG,iBAAiB,GAAG,SAAS,EAAE;;;oBAtezEC,cAAS,SAAC;wBACP,eAAe,EAAEC,4BAAuB,CAAC,MAAM;;wBAC/C,IAAI,EAAE;4BACF,KAAK,EAAE,qBAAqB;yBAC/B;wBACD,QAAQ,EAAE,oBAAoB;wBAC9B,QAAQ,EAAE,4RAA4R;qBACzS;;;;oBA/BiCC,sBAAiB;oBAO1C,oBAAoB;oBACpB,eAAe;;yCARxB;;;;;;;;;;ACKA,QAAa,IAAI,GAA4B;QACzC,IAAI,EAAE;YACF,OAAO;gBACH,IAAI,EAAE;oBACF,OAAO,EAAE,GAAG;iBACf;gBACD,EAAE,EAAE;oBACA,OAAO,EAAE,GAAG;iBACf;aACJ,CAAC;SACL;QACD,IAAI,EAAE;YACF,OAAO;gBACH,IAAI,EAAE;oBACF,OAAO,EAAE,GAAG;iBACf;gBACD,EAAE,EAAE;oBACA,OAAO,EAAE,GAAG;iBACf;aACJ,CAAC;SACL;KACJ,CAAC;;;;;;;;;ACnBF,QAAa,KAAK,GAA4B;QAC1C,IAAI,EAAE,UAAC,YAAkC;;YAGrC,IAAM,MAAM,GAAmB,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;;YAClE,IAAM,KAAK,GAAW,YAAY,CAAC,SAAS,CAAC,QAAQ,EAAE,CAAC;;YACxD,IAAI,IAAI,CAEN;;YACF,IAAI,EAAE,CAEJ;;YAGF,IAAI,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,KAAK,MAAM,EAAE;gBAChD,IAAI,GAAG;oBACH,SAAS,EAAE,qBAAmB,KAAK,YAAS;iBAC/C,CAAC;gBACF,EAAE,GAAG;oBACD,SAAS,EAAE,gCAA8B,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,qBAAgB,KAAK,YAAS;iBAC7G,CAAC;aACL;iBAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,KAAK,OAAO,EAAE;gBACxD,IAAI,GAAG;oBACH,SAAS,EAAE,qBAAmB,KAAK,YAAS;iBAC/C,CAAC;gBACF,EAAE,GAAG;oBACD,SAAS,EAAE,+BAA6B,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,qBAAgB,KAAK,YAAS;iBAC5G,CAAC;aACL;iBAAM;;gBACH,IAAI,kBAAkB,UAAS;gBAC/B,IAAI,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,EAAE;oBAC7C,kBAAkB,GAAG,mBAAiB,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,gBAAa,CAAC;iBAC1F;qBAAM;oBACH,kBAAkB,GAAG,kBAAgB,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,gBAAa,CAAC;iBACzF;gBACD,IAAI,GAAG;oBACH,SAAS,EAAE,wBAAsB,KAAK,YAAS;iBAClD,CAAC;gBACF,EAAE,GAAG;oBACD,SAAS,EAAE,wBAAsB,kBAAkB,UAAO;iBAC7D,CAAC;aACL;;YAGD,OAAO;gBACH,IAAI,MAAA;gBACJ,EAAE,IAAA;aACL,CAAC;SAEL;QACD,IAAI,EAAE,UAAC,YAAkC;;YAGrC,IAAM,MAAM,GAAmB,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC;;YAClE,IAAI,IAAI,CAEN;;YACF,IAAI,EAAE,CAEJ;;YAGF,IAAI,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,KAAK,MAAM,EAAE;gBAChD,IAAI,GAAG;oBACH,SAAS,EAAE,gCAA8B,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,wBAAqB;iBACpG,CAAC;gBACF,EAAE,GAAG;oBACD,SAAS,EAAE,wBAAwB;iBACtC,CAAC;aACL;iBAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,KAAK,OAAO,EAAE;gBACxD,IAAI,GAAG;oBACH,SAAS,EAAE,+BAA6B,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,wBAAqB;iBACnG,CAAC;gBACF,EAAE,GAAG;oBACD,SAAS,EAAE,wBAAwB;iBACtC,CAAC;aACL;iBAAM;;gBACH,IAAI,kBAAkB,UAAS;gBAC/B,IAAI,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,EAAE;oBAC7C,kBAAkB,GAAG,mBAAiB,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,gBAAa,CAAC;iBAC1F;qBAAM;oBACH,kBAAkB,GAAG,kBAAgB,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,gBAAa,CAAC;iBACzF;gBACD,IAAI,GAAG;oBACH,SAAS,EAAE,wBAAsB,kBAAkB,UAAO;iBAC7D,CAAC;gBACF,EAAE,GAAG;oBACD,SAAS,EAAE,2BAA2B;iBACzC,CAAC;aACL;;YAGD,OAAO;gBACH,IAAI,MAAA;gBACJ,EAAE,IAAA;aACL,CAAC;SAEL;KACJ,CAAC;;;;;;ACzGF;;;;;YAwBQ,IAAI,CAAC,gBAAgB,GAAG;gBACpB,IAAI,MAAA;gBACJ,KAAK,OAAA;aACR,CAAC;;;;;;;;;;;;QAaC,mDAAgB;;;;;;;;;;kBAAC,SAA0B,EAAE,YAAkC;;YAGlF,IAAI,SAAS,CAAmC;;YAChD,IAAI,QAAQ,CAAS;;YACrB,IAAI,MAAM,CAAS;YACnB,IAAI,SAAS,KAAK,MAAM,EAAE;gBACtB,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAChH,QAAQ,GAAG,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;gBACpE,MAAM,GAAG,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;aACtE;iBAAM;gBACH,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;gBAChH,QAAQ,GAAG,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;gBACpE,MAAM,GAAG,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;aACtE;;YAGD,OAAO;gBACH,SAAS,EAAE;oBACP,SAAS,CAAC,IAAI;oBACd,SAAS,CAAC,EAAE;iBACf;gBACD,OAAO,EAAE;oBACL,QAAQ,UAAA;oBACR,MAAM,QAAA;oBACN,IAAI,EAAE,UAAU;iBACnB;aACJ,CAAC;;;oBAzDTL,eAAU;;;;uCAVX;;;;;;;ACAA;;;;;;;;YAmCQ,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;YACb,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;;;;;;;;QAShB,oCAAK;;;;;;kBAAC,QAAgB;;YACzB,OAAO,IAAI,OAAO,CAAY,UAAC,OAAmB,EAAE,MAAkB;;;gBAGlE,KAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;;;gBAG1B,KAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC;gBACrC,KAAI,CAAC,QAAQ,EAAE,CAAC;aAEnB,CAAC,CAAC;;;;;;QAMA,oCAAK;;;;;YACR,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3B,IAAI,CAAC,SAAS,IAAI,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;;;;;;QAM/C,uCAAQ;;;;;;YACX,IAAI,CAAC,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YAChC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC;gBAC7B,KAAI,CAAC,MAAM,EAAE,CAAC;aACjB,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;;;;;;QAMhB,mCAAI;;;;;YACP,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAC3B,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;;;;;;QAMf,qCAAM;;;;;YACV,IAAI,CAAC,qBAAqB,EAAE,CAAC;;;oBAhFpCA,eAAU;;;;mCARX;;;;;;;ACAA;;;;;;;;;+CAsGuB,UAAsB,EAAE,QAAmB,EAAE,eAAgC,EAC5F,oBAA0C,EAAE,wBAAkD;YAC9F,IAAI,CAAC,MAAM,GAAG,eAAe,CAAC,SAAS,EAAE,CAAC;YAC1C,IAAI,CAAC,KAAK,GAAG,IAAIM,iBAAY,EAAiC,CAAC;YAC/D,IAAI,CAAC,OAAO,GAAG,IAAIA,iBAAY,EAAU,CAAC;YAC1C,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC;YACzC,IAAI,CAAC,gBAAgB,GAAG,wBAAwB,CAAC;YACjD,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,OAAO,GAAG,UAAU,CAAC,aAAa,CAAC;YACxC,IAAI,CAAC,YAAY,GAAG,CAAC,CAAC;;;;;;QAMnB,uDAAe;;;;;YAClB,IAAI,CAAC,KAAK,EAAE,CAAC;YACb,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;YAC/C,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;YAC7C,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;;;;;;;QAQnB,iDAAS;;;;;;YACZ,OAAO,IAAI,CAAC,MAAM,CAAC;;;;;;;QAQhB,iDAAS;;;;;;YACZ,OAAO,IAAI,CAAC,aAAa,CAAC;;;;;;;QAQvB,gDAAQ;;;;;;YACX,OAAO,IAAI,CAAC,YAAY,CAAC;;;;;;;QAQtB,gDAAQ;;;;;;YACX,OAAO,IAAI,CAAC,YAAY,CAAC;;;;;;;QAQtB,4CAAI;;;;;;;YACP,OAAO,IAAI,OAAO,CAAY,UAAC,OAAmB,EAAE,MAAkB;;gBAGlE,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE;;oBAGzE,IAAM,aAAa,GAA0B,KAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAI,CAAC,YAAY,CAAC,CAAC;;oBAG/G,IAAM,kBAAkB,GAAkB,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;oBAClF,KAAK,IAAI,CAAC,GAAW,kBAAkB,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;wBAC7D,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,EAAE,kBAAkB,CAAC,CAAC,CAAC,EACtD,aAAa,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC1D;;;oBAGD,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC;;oBAC9D,IAAM,SAAS,GAAc,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC;oBAClG,SAAS,CAAC,QAAQ,GAAG;wBACjB,KAAI,CAAC,kBAAkB,EAAE,CAAC;wBAC1B,OAAO,EAAE,CAAC;qBACb,CAAC;iBAEL;qBAAM;;;oBAGH,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,EAAE,YAAY,EAAE,SAAS,CAAC,CAAC;oBAC9D,KAAI,CAAC,kBAAkB,EAAE,CAAC;oBAC1B,OAAO,EAAE,CAAC;iBAEb;aAEJ,CAAC,CAAC;;;;;;;QASA,4CAAI;;;;;;;YACP,OAAO,IAAI,OAAO,CAAY,UAAC,OAAmB,EAAE,MAAkB;gBAElE,KAAI,CAAC,iBAAiB,EAAE,CAAC;;gBAGzB,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE;;oBACzE,IAAM,aAAa,GAA0B,KAAI,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,MAAM,EAAE,KAAI,CAAC,YAAY,CAAC,CAAC;;oBAC/G,IAAM,SAAS,GAAc,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC;oBAClG,SAAS,CAAC,QAAQ,GAAG;wBACjB,OAAO,EAAE,CAAC;qBACb,CAAC;iBACL;qBAAM;oBACH,OAAO,EAAE,CAAC;iBACb;aAEJ,CAAC,CAAC;;;;;;;;;QAUA,6CAAK;;;;;;;kBAAC,QAAgB,EAAE,gBAAyB;;YACpD,OAAO,IAAI,OAAO,CAAY,UAAC,OAAmB,EAAE,MAAkB;;gBAGlE,IAAI,eAAe,CAAS;gBAC5B,IAAI,CAAC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,IAAI,gBAAgB;wBACjE,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,QAAQ,IAAI,CAAC,gBAAgB,CAAC,EAAE;oBAC/E,eAAe,GAAG,KAAI,CAAC,YAAY,GAAG,QAAQ,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC;iBACtF;qBAAM;oBACH,eAAe,GAAG,KAAI,CAAC,YAAY,GAAG,QAAQ,GAAG,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC;iBACtF;;gBACD,IAAM,kBAAkB,GAAW,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,KAAK,QAAQ,GAAG,MAAM,GAAG,GAAG,CAAC;;gBAGxG,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,IAAI,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE;;oBAC1E,IAAM,aAAa,GAA0B;;wBACzC,SAAS,EAAE;4BACP;gCACI,SAAS,EAAE,kBAAgB,kBAAkB,UAAK,KAAI,CAAC,YAAY,YAAS;6BAC/E;4BACD;gCACI,SAAS,EAAE,kBAAgB,kBAAkB,UAAK,eAAe,YAAS;6BAC7E;yBACJ;wBACD,OAAO,EAAE;4BACL,QAAQ,EAAE,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK;4BAC5C,MAAM,EAAE,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM;4BAC3C,IAAI,EAAE,UAAU;yBACnB;qBACJ,CAAC;oBACF,KAAI,CAAC,YAAY,GAAG,eAAe,CAAC;;oBACpC,IAAM,SAAS,GAAc,KAAI,CAAC,OAAO,CAAC,OAAO,CAAC,aAAa,CAAC,SAAS,EAAE,aAAa,CAAC,OAAO,CAAC,CAAC;oBAClG,SAAS,CAAC,QAAQ,GAAG;wBACjB,OAAO,EAAE,CAAC;qBACb,CAAC;iBAEL;qBAAM;oBACH,KAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,KAAI,CAAC,OAAO,EAAE,WAAW,EAAE,kBAAgB,kBAAkB,UAAK,eAAe,YAAS,CAAC,CAAC;oBACnH,KAAI,CAAC,YAAY,GAAG,eAAe,CAAC;oBACpC,OAAO,EAAE,CAAC;iBACb;aAEJ,CAAC,CAAC;;;;;;QAOA,sDAAc;;;;;YACjB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;;;;;;QAMrC,+DAAuB;;;;;YAC1B,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,KAAK,eAAe,EAAE;gBACvD,IAAI,CAAC,kBAAkB,EAAE,CAAC;aAC7B;iBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,KAAK,eAAe,EAAE;gBAC9D,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAC5B;;;;;;QAME,8DAAsB;;;;;YACzB,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,KAAK,eAAe,EAAE;gBACvD,IAAI,CAAC,qBAAqB,EAAE,CAAC;aAChC;iBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,WAAW,KAAK,eAAe,EAAE;gBAC9D,IAAI,CAAC,kBAAkB,EAAE,CAAC;aAC7B;;;;;;QAME,2DAAmB;;;;;YACtB,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,OAAO,KAAK,MAAM,EAAE;gBAC1C,IAAI,CAAC,cAAc,EAAE,CAAC;aACzB;;;;;;QAMG,0DAAkB;;;;;;YACtB,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,CAAC,EAAE;gBAChF,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;oBACzD,KAAI,CAAC,cAAc,EAAE,CAAC;iBACzB,CAAC,CAAC;aACN;;;;;;QAMG,0DAAkB;;;;;YACtB,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,CAAC,EAAE;gBAChF,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,CAAC;aAC7B;;;;;;QAMG,6DAAqB;;;;;YACzB,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,CAAC,EAAE;gBAChF,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE,CAAC;aAChC;;;;;;QAMG,yDAAiB;;;;;YACrB,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,KAAK,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,GAAG,CAAC,EAAE;gBAChF,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;aAC5B;;;;;;QAMG,6CAAK;;;;;;YAGT,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,KAAK,MAAM,EAAE;gBACrD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,OAAI,CAAC,CAAC;aACjG;iBAAM,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,KAAK,OAAO,EAAE;gBAC7D,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,EAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,OAAI,CAAC,CAAC;aAClG;iBAAM;gBACH,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;;gBAEpD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,WAAW,EAAE,2BAA2B,CAAC,CAAC;aAClF;YACD,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,KAAK,KAAK,EAAE;gBAClD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,EAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,OAAI,CAAC,CAAC;aAC9F;iBAAM;gBACH,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,EAAK,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,OAAI,CAAC,CAAC;aACjG;;YAGD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,6BAA2B,IAAI,CAAC,YAAY,CAAC,IAAM,CAAC,CAAC;YAC1F,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,6BAA2B,IAAI,CAAC,MAAM,CAAC,KAAO,CAAC,CAAC;;;oBAzW5FH,cAAS,SAAC;wBACP,eAAe,EAAEC,4BAAuB,CAAC,MAAM;;wBAC/C,IAAI,EAAE;4BACF,SAAS,EAAE,uBAAuB;4BAClC,YAAY,EAAE,0BAA0B;4BACxC,aAAa,EAAE,2BAA2B;4BAC1C,KAAK,EAAE,wBAAwB;yBAClC;wBACD,SAAS,EAAE;4BAGP,oBAAoB;yBACvB;wBACD,QAAQ,EAAE,uBAAuB;wBACjC,QAAQ,EAAE,wqBAAwqB;qBACrrB;;;;oBAhC2DG,eAAU;oBAA+BC,cAAS;oBAMrG,eAAe;oBACf,oBAAoB;oBAJpB,wBAAwB;;;mCAmC5BC,UAAK;4BAMLC,WAAM;8BAMNA,WAAM;;4CAlDX;;;;;;;ACAA;;;AAeA,QAAa,oBAAoB,GAC3B,IAAIC,mBAAc,CAAkB,qCAAqC,CAAC,CAAC;;;;AAKjF,QAAa,mBAAmB,GAC1B,IAAIA,mBAAc,CAAiB,oCAAoC,CAAC,CAAC;;;;;;;;;;AAa/E,yCAA4C,OAAwB;QAChE,OAAO,IAAI,cAAc,CAAC,OAAO,CAAC,CAAC;KACtC;;;;;;;;;AAUD;QACI,OAAO,IAAI,cAAc,CAAC,EAAE,CAAC,CAAC;KACjC;;;;;;;;;;;;;QAqCiB,yBAAU;;;;;;kBAAC,OAA6B;YAA7B,wBAAA,EAAA,YAA6B;YAClD,OAAO;gBACH,QAAQ,EAAE,cAAc;gBACxB,SAAS,EAAE;;oBAGP;wBACI,OAAO,EAAE,oBAAoB;wBAC7B,QAAQ,EAAE,OAAO;qBACpB;;oBAGD;wBACI,IAAI,EAAE;4BACF,oBAAoB;yBACvB;wBACD,OAAO,EAAE,mBAAmB;wBAC5B,UAAU,EAAE,2BAA2B;qBAC1C;iBAEJ;aACJ,CAAC;;;oBArDTC,aAAQ,SAAC;wBACN,YAAY,EAAE;4BACV,0BAA0B;4BAC1B,6BAA6B;yBAChC;wBACD,OAAO,EAAE;4BACL,0BAA0B;yBAC7B;wBACD,OAAO,EAAE;4BACLC,mBAAY;yBACf;wBACD,SAAS,EAAE;4BACP,wBAAwB;4BACxB,eAAe;4BACf,oBAAoB;;4BAGpB;gCACI,OAAO,EAAE,mBAAmB;gCAC5B,UAAU,EAAE,4BAA4B;6BAC3C;yBAEJ;qBACJ;;6BA7ED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}