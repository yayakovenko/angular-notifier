{"version":3,"file":"notifier-animation.service.js","sourceRoot":"","sources":["notifier-animation.service.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAI3C,OAAO,EAAE,IAAI,EAAE,MAAM,8CAA8C,CAAC;AACpE,OAAO,EAAE,KAAK,EAAE,MAAM,+CAA+C,CAAC;;;;;;QAmB9D,IAAI,CAAC,gBAAgB,GAAG;YACpB,IAAI,MAAA;YACJ,KAAK,OAAA;SACR,CAAC;;;;;;;;;;;;IAaC,mDAAgB;;;;;;;;;;cAAC,SAA0B,EAAE,YAAkC;;QAGlF,IAAI,SAAS,CAAmC;;QAChD,IAAI,QAAQ,CAAS;;QACrB,IAAI,MAAM,CAAS;QACnB,EAAE,CAAC,CAAC,SAAS,KAAK,MAAM,CAAC,CAAC,CAAC;YACvB,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAChH,QAAQ,GAAG,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;YACpE,MAAM,GAAG,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;SACtE;QAAC,IAAI,CAAC,CAAC;YACJ,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAChH,QAAQ,GAAG,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC;YACpE,MAAM,GAAG,YAAY,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC;SACtE;;QAGD,MAAM,CAAC;YACH,SAAS,EAAE;gBACP,SAAS,CAAC,IAAI;gBACd,SAAS,CAAC,EAAE;aACf;YACD,OAAO,EAAE;gBACL,QAAQ,UAAA;gBACR,MAAM,QAAA;gBACN,IAAI,EAAE,UAAU;aACnB;SACJ,CAAC;;;gBAzDT,UAAU;;;;mCAVX;;SAWa,wBAAwB","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { NotifierAnimationData, NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from './../models/notifier-animation.model';\nimport { NotifierNotification } from './../models/notifier-notification.model';\nimport { fade } from './../animation-presets/fade.animation-preset';\nimport { slide } from './../animation-presets/slide.animation-preset';\n\n/**\n * Notifier animation service\n */\n@Injectable()\nexport class NotifierAnimationService {\n\n\t/**\n\t * List of animation presets (currently static)\n\t */\n    private readonly animationPresets: {\n        [animationPresetName: string]: NotifierAnimationPreset\n    };\n\n\t/**\n\t * Constructor\n\t */\n    public constructor() {\n        this.animationPresets = {\n            fade,\n            slide\n        };\n    }\n\n\t/**\n\t * Get animation data\n\t *\n\t * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation\n\t * direction (either in or out) as well as the notifications (and its attributes) itself.\n\t *\n\t * @param   direction    Animation direction, either in or out\n\t * @param   notification Notification the animation data should be generated for\n\t * @returns Animation information\n\t */\n    public getAnimationData(direction: 'show' | 'hide', notification: NotifierNotification): NotifierAnimationData {\n\n        // Get all necessary animation data\n        let keyframes: NotifierAnimationPresetKeyframes;\n        let duration: number;\n        let easing: string;\n        if (direction === 'show') {\n            keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);\n            duration = notification.component.getConfig().animations.show.speed;\n            easing = notification.component.getConfig().animations.show.easing;\n        } else {\n            keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);\n            duration = notification.component.getConfig().animations.hide.speed;\n            easing = notification.component.getConfig().animations.hide.easing;\n        }\n\n        // Build and return animation data\n        return {\n            keyframes: [\n                keyframes.from,\n                keyframes.to\n            ],\n            options: {\n                duration,\n                easing,\n                fill: 'forwards' // Keep the newly painted state after the animation finished\n            }\n        };\n\n    }\n\n}\n"]}