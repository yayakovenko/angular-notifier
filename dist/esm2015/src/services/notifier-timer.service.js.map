{"version":3,"file":"notifier-timer.service.js","sourceRoot":"","sources":["notifier-timer.service.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;;;;;;;AAS3C,MAAM;;;;;QA0BE,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;QACb,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;;;;;;;;IAShB,KAAK,CAAC,QAAgB;QACzB,MAAM,CAAC,IAAI,OAAO,CAAY,CAAC,OAAmB,EAAE,MAAkB,EAAE,EAAE;;YAGtE,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;;YAG1B,IAAI,CAAC,qBAAqB,GAAG,OAAO,CAAC;YACrC,IAAI,CAAC,QAAQ,EAAE,CAAC;SAEnB,CAAC,CAAC;;;;;;IAMA,KAAK;QACR,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,IAAI,CAAC,SAAS,IAAI,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,GAAG,CAAC;;;;;;IAM/C,QAAQ;QACX,IAAI,CAAC,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE;YAClC,IAAI,CAAC,MAAM,EAAE,CAAC;SACjB,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;;;;;;IAMhB,IAAI;QACP,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC3B,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;;;;;;IAMf,MAAM;QACV,IAAI,CAAC,qBAAqB,EAAE,CAAC;;;;YAhFpC,UAAU","sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Notifier timer service\n *\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\n */\n@Injectable()\nexport class NotifierTimerService {\n\n\t/**\n\t * Timestamp (in ms), created in the moment the timer starts\n\t */\n    private now: number;\n\n\t/**\n\t * Remaining time (in ms)\n\t */\n    private remaining: number;\n\n\t/**\n\t * Timeout ID, used for clearing the timeout later on\n\t */\n    private timerId: number;\n\n\t/**\n\t * Promise resolve function, eventually getting called once the timer finishes\n\t */\n    private finishPromiseResolver: () => void;\n\n\t/**\n\t * Constructor\n\t */\n    public constructor() {\n        this.now = 0;\n        this.remaining = 0;\n    }\n\n\t/**\n\t * Start (or resume) the timer\n\t *\n\t * @param   duration Timer duration, in ms\n\t * @returns          Promise, resolved once the timer finishes\n\t */\n    public start(duration: number): Promise<undefined> {\n        return new Promise<undefined>((resolve: () => void, reject: () => void) => {\n\n            // For the first run ...\n            this.remaining = duration;\n\n            // Setup, then start the timer\n            this.finishPromiseResolver = resolve;\n            this.continue();\n\n        });\n    }\n\n\t/**\n\t * Pause the timer\n\t */\n    public pause(): void {\n        clearTimeout(this.timerId);\n        this.remaining -= new Date().getTime() - this.now;\n    }\n\n\t/**\n\t * Continue the timer\n\t */\n    public continue(): void {\n        this.now = new Date().getTime();\n        this.timerId = window.setTimeout(() => {\n            this.finish();\n        }, this.remaining);\n    }\n\n\t/**\n\t * Stop the timer\n\t */\n    public stop(): void {\n        clearTimeout(this.timerId);\n        this.remaining = 0;\n    }\n\n\t/**\n\t * Finish up the timeout by resolving the timer promise\n\t */\n    private finish(): void {\n        this.finishPromiseResolver();\n    }\n\n}\n"]}